class Solution {
public:
//// [7, 1, 5, 6] 第二天买入，第四天卖出，收益最大（6-1），所以一般人可能会想，怎么判断不是第三天就卖出了呢? 
//这里就把问题复杂化了，根据题目的意思，当天卖出以后，当天还可以买入，
//所以其实可以第三天卖出，第三天买入，第四天又卖出（（5-1）+ （6-5） === 6 - 1）。
//所以算法可以直接简化为只要今天比昨天大，就卖出。
//
//第二种方法：贪心算法，一次遍历，只要今天价格小于明天价格就在今天买入然后明天卖出，时间复杂度O(n)

  //贪心算法：
  int maxProfit(vector<int>& prices) {
        if(p)
        int profit = 0;
        for(int i = 1; i<prices.size() ;i++){
            if(prices[i]-prices[i-1]>0)
                profit+= (prices[i]-prices[i-1]);
        }
        return profit;
    }
};

//第三种方法：DP动态规划，第i天只有两种状态，不持有或持有股票，当天不持有股票的状态可能来自昨天卖出或者昨天也不持有，
//同理，当天持有股票的状态可能来自昨天买入或者昨天也持有中，取最后一天的不持有股票状态就是问题的解
//动态规划：
